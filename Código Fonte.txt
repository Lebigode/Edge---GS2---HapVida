#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <PubSubClient.h>

// Wi-Fi
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// Pinos
const int oneWireBus = 4; // Sensor DS18B20
const int potPin = 34; // Potenciômetro

// Configuração do OneWire
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

// Cliente WiFi para a conexão MQTT
WiFiClient espClient;
PubSubClient mqttClient(espClient);

// Endereço do broker MQTT
const char* mqtt_server = "test.mosquitto.org";
int mqttPort = 1883;

void setup() {
  Serial.begin(115200);
  sensors.begin();
  pinMode(potPin, INPUT);

  // Conectar ao Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Conectando ao Wi-Fi...");
  }
  Serial.println("Conectado ao Wi-Fi");

  // Conectar ao MQTT
  mqttClient.setServer(mqtt_server, mqttPort);
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }
  mqttClient.loop();

  // Simular temperatura com potenciômetro
  int potValue = analogRead(potPin);
  float simulatedTemp = map(potValue, 0, 4095, -20, 50); // Mapeia para uma faixa de temperatura

  // Publicar a temperatura simulada no MQTT
  char tempString[8];
  dtostrf(simulatedTemp, 1, 2, tempString);
  mqttClient.publish("esp32/temperature", tempString);

  Serial.print("Temperatura Simulada: ");
  Serial.print(simulatedTemp);
  Serial.println("ºC");

  delay(2000);
}

void reconnect() {
  while (!mqttClient.connected()) {
    Serial.println("Conectando ao MQTT Broker...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);

    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("Conectado ao MQTT Broker");
    } else {
      delay(5000);
    }
  }
}
